document.addEventListener('DOMContentLoaded', () => {
  let currentSlide = 0;
  let isAutoPlay = true;
  let autoPlayInterval;
  const totalSlides = 5;

  const slides = document.querySelectorAll('.carousel-item');
  const indicators = document.querySelectorAll('.indicator');
  const carouselWrapper = document.querySelector('.carousel-wrapper');
  const autoPlayIcon = document.getElementById('autoPlayIcon');
  const autoPlayText = document.getElementById('autoPlayText');

  // –ü–æ–∫—Ä–∞—â–µ–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è —Å–≤–∞–π–ø—ñ–≤
  let swipeData = {
    startX: 0,
    startY: 0,
    startTime: 0,
    isSwiping: false,
    isDragging: false,
    minDistance: 30,
    maxTime: 1000,
    minVelocity: 0.3,
    debounceTime: 300,
    lastSwipeTime: 0
  };

  // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞ —á—É—Ç–ª–∏–≤—ñ—Å—Ç—å
  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
  if (isMobile) {
    swipeData.minDistance = 25;
    swipeData.minVelocity = 0.2;
  }

  if (!carouselWrapper || slides.length === 0 || indicators.length === 0) {
    console.warn('‚ö†Ô∏è –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è –∫–∞—Ä—É—Å–µ–ª—ñ');
    return;
  }

  // üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É —Å–ª–∞–π–¥—ñ–≤
  function updateCarousel() {
    slides.forEach((slide, index) => {
      slide.className = 'carousel-item';
      if (index === currentSlide) {
        slide.classList.add('active');
      } else if (index === (currentSlide - 1 + totalSlides) % totalSlides) {
        slide.classList.add('prev');
      } else if (index === (currentSlide + 1) % totalSlides) {
        slide.classList.add('next');
      } else {
        slide.classList.add('hidden');
      }
    });

    indicators.forEach((indicator, index) => {
      indicator.classList.toggle('active', index === currentSlide);
    });
  }

  // Debounce —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è —à–≤–∏–¥–∫–∏—Ö –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö –≤–∏–∫–ª–∏–∫—ñ–≤
  function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  function nextSlide() {
    const now = Date.now();
    if (now - swipeData.lastSwipeTime < swipeData.debounceTime) return;

    currentSlide = (currentSlide + 1) % totalSlides;
    updateCarousel();
    resetAutoPlay();
    swipeData.lastSwipeTime = now;
  }

  function prevSlide() {
    const now = Date.now();
    if (now - swipeData.lastSwipeTime < swipeData.debounceTime) return;

    currentSlide = (currentSlide - 1 + totalSlides) % totalSlides;
    updateCarousel();
    resetAutoPlay();
    swipeData.lastSwipeTime = now;
  }

  function goToSlide(index) {
    const now = Date.now();
    if (now - swipeData.lastSwipeTime < swipeData.debounceTime) return;

    currentSlide = index;
    updateCarousel();
    resetAutoPlay();
    swipeData.lastSwipeTime = now;
  }

  function startAutoPlay() {
    stopAutoPlay();
    if (isAutoPlay) {
      autoPlayInterval = setInterval(nextSlide, 5000);
    }
  }

  function stopAutoPlay() {
    clearInterval(autoPlayInterval);
  }

  function resetAutoPlay() {
    if (isAutoPlay) startAutoPlay();
  }

  function toggleAutoPlay() {
    isAutoPlay = !isAutoPlay;
    updateAutoPlayButton();
    if (isAutoPlay) {
      startAutoPlay();
    } else {
      stopAutoPlay();
    }
  }

  function updateAutoPlayButton() {
    if (!autoPlayIcon || !autoPlayText) return;
    if (isAutoPlay) {
      autoPlayIcon.innerHTML = `
        <div class="pause-bars">
          <div class="pause-bar"></div>
          <div class="pause-bar"></div>
        </div>`;
      autoPlayText.textContent = '–ü–∞—É–∑–∞';
    } else {
      autoPlayIcon.innerHTML = '<div class="play-triangle"></div>';
      autoPlayText.textContent = '–ê–≤—Ç–æ';
    }
  }

  // –ü–æ–∫—Ä–∞—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ —Å–≤–∞–π–ø—É
  function handleSwipe(startX, startY, endX, endY, startTime, endTime) {
    const deltaX = endX - startX;
    const deltaY = endY - startY;
    const deltaTime = endTime - startTime;

    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    const velocity = distance / deltaTime;

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ —Å–≤–∞–π–ø—É
    if (distance < swipeData.minDistance) return null;
    if (deltaTime > swipeData.maxTime) return null;
    if (velocity < swipeData.minVelocity) return null;

    // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–ø—Ä—è–º–∫—É (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏–º –∂–µ—Å—Ç–∞–º)
    if (Math.abs(deltaX) > Math.abs(deltaY) * 1.5) {
      return deltaX > 0 ? 'right' : 'left';
    }

    return null; // –Ü–≥–Ω–æ—Ä—É—î–º–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ñ —Ç–∞ –¥—ñ–∞–≥–æ–Ω–∞–ª—å–Ω—ñ –∂–µ—Å—Ç–∏
  }

  // –§—É–Ω–∫—Ü—ñ—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ —Ñ—ñ–¥–±–µ–∫—É
  function addSwipeFeedback(direction) {
    carouselWrapper.classList.add(`swipe-${direction}`);
    setTimeout(() => {
      carouselWrapper.classList.remove(`swipe-${direction}`);
    }, 200);
  }

  // üéØ –ü–æ–¥—ñ—ó –º–∏—à—ñ
  carouselWrapper.addEventListener('mouseenter', stopAutoPlay);
  carouselWrapper.addEventListener('mouseleave', () => {
    if (isAutoPlay) startAutoPlay();
  });

  // üì± –ü–æ–∫—Ä–∞—â–µ–Ω—ñ —Å–≤–∞–π–ø–∏
  carouselWrapper.addEventListener('touchstart', (e) => {
    // –Ü–≥–Ω–æ—Ä—É—î–º–æ –∫–ª—ñ–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–∞—Ö —Ç–∞ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞—Ö
    if (e.target.closest('button') || e.target.closest('.indicator')) {
      return;
    }

    const touch = e.touches[0];
    swipeData.startX = touch.clientX;
    swipeData.startY = touch.clientY;
    swipeData.startTime = Date.now();
    swipeData.isSwiping = true;
    swipeData.isDragging = false;

    stopAutoPlay();
  }, { passive: true });

  carouselWrapper.addEventListener('touchmove', (e) => {
    if (!swipeData.isSwiping) return;

    const touch = e.touches[0];
    const deltaX = Math.abs(touch.clientX - swipeData.startX);
    const deltaY = Math.abs(touch.clientY - swipeData.startY);

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ —Ü–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏–π –∂–µ—Å—Ç
    if (deltaX > 10 || deltaY > 10) {
      swipeData.isDragging = true;
    }

    // –ë–ª–æ–∫—É—î–º–æ —Å–∫—Ä–æ–ª —Ç—ñ–ª—å–∫–∏ –¥–ª—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏—Ö –∂–µ—Å—Ç—ñ–≤
    if (deltaX > deltaY && deltaX > 15) {
      e.preventDefault();
    }
  }, { passive: false });

  carouselWrapper.addEventListener('touchend', (e) => {
    if (!swipeData.isSwiping || !swipeData.isDragging) {
      swipeData.isSwiping = false;
      resetAutoPlay();
      return;
    }

    const touch = e.changedTouches[0];
    const endTime = Date.now();

    const swipeDirection = handleSwipe(
      swipeData.startX,
      swipeData.startY,
      touch.clientX,
      touch.clientY,
      swipeData.startTime,
      endTime
    );

    if (swipeDirection) {
      addSwipeFeedback(swipeDirection);

      if (swipeDirection === 'left') {
        nextSlide();
      } else if (swipeDirection === 'right') {
        prevSlide();
      }
    }

    swipeData.isSwiping = false;
    swipeData.isDragging = false;
    resetAutoPlay();
  }, { passive: true });

  // ‚å®Ô∏è –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ debounce
  const debouncedPrevSlide = debounce(prevSlide, 200);
  const debouncedNextSlide = debounce(nextSlide, 200);

  document.addEventListener('keydown', (e) => {
    // –Ü–≥–Ω–æ—Ä—É—î–º–æ, —è–∫—â–æ —Ñ–æ–∫—É—Å –Ω–∞ —ñ–Ω–ø—É—Ç—ñ
    if (e.target.tagName === 'INPUT' || e.target.tagName === 'TEXTAREA') {
      return;
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–∞—Ä—É—Å–µ–ª—å–∫–∞ –≤–∏–¥–∏–º–∞ –Ω–∞ –µ–∫—Ä–∞–Ω—ñ
    if (!carouselWrapper.offsetParent) {
      return; // –ö–∞—Ä—É—Å–µ–ª—å–∫–∞ –Ω–µ –≤–∏–¥–∏–º–∞
    }

    switch (e.key) {
      case 'ArrowLeft':
        e.preventDefault();
        debouncedPrevSlide();
        break;
      case 'ArrowRight':
        e.preventDefault();
        debouncedNextSlide();
        break;
      case ' ':
        e.preventDefault();
        toggleAutoPlay();
        break;
    }
  });

  // üñ± –ö–ª—ñ–∫ –Ω–∞ —Å–ª–∞–π–¥ ‚Äî –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –Ω—å–æ–≥–æ
  slides.forEach((slide, index) => {
    slide.addEventListener('click', (e) => {
      // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ –∫–ª—ñ–∫–∞–º –ø—ñ—Å–ª—è —Å–≤–∞–π–ø—É
      if (swipeData.isDragging) {
        e.preventDefault();
        return;
      }

      if (!slide.classList.contains('active')) {
        goToSlide(index);
      }
    });
  });

  // –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
  const prevButton = document.querySelector('.carousel-controls .control-btn:first-child');
  const nextButton = document.querySelector('.carousel-controls .control-btn:last-child');

  if (prevButton) {
    prevButton.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      prevSlide();
    });
  }

  if (nextButton) {
    nextButton.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      nextSlide();
    });
  }

  // –û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤
  indicators.forEach((indicator, index) => {
    indicator.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      goToSlide(index);
    });
  });

  // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è: –ø–∞—É–∑–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –≤–∫–ª–∞–¥–∫–∏
  document.addEventListener('visibilitychange', () => {
    if (document.hidden) {
      stopAutoPlay();
    } else if (isAutoPlay) {
      startAutoPlay();
    }
  });

  // –û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ –æ—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—ó –Ω–∞ –º–æ–±—ñ–ª—å–Ω–∏—Ö
  window.addEventListener('orientationchange', () => {
    if (isMobile) {
      setTimeout(() => {
        updateCarousel();
      }, 500);
    }
  });

  // –ï–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è –¥—Ä—É–≥–æ—ó –∫–∞—Ä—É—Å–µ–ª—ñ —á–µ—Ä–µ–∑ —ñ–Ω—à–∏–π namespace
  window.CarouselAPI = {
    nextSlide,
    prevSlide,
    goToSlide,
    toggleAutoPlay,
    getCurrentSlide: () => currentSlide,
    getTotalSlides: () => totalSlides,
    isAutoPlay: () => isAutoPlay
  };

  // –î–æ–¥–∞—î–º–æ –≥–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º –¥–ª—è –¥—Ä—É–≥–æ—ó –∫–∞—Ä—É—Å–µ–ª—ñ
  window.carouselPrevSlide = prevSlide;
  window.carouselNextSlide = nextSlide;
  window.carouselGoToSlide = goToSlide;
  window.toggleAutoPlay = toggleAutoPlay;

  // üü¢ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
  updateAutoPlayButton();
  updateCarousel();
  startAutoPlay();

  // Debug —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
  console.log('üé† Carousel initialized');
  console.log(`üì± Device: ${isMobile ? 'Mobile' : 'Desktop'}`);
  console.log(`üìè Swipe sensitivity: ${swipeData.minDistance}px`);
  console.log(`‚ö° Min velocity: ${swipeData.minVelocity}`);
});
