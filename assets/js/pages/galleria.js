// ============================================
// üñºÔ∏è –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ê –í–ï–†–¢–ò–ö–ê–õ–¨–ù–ê –ì–ê–õ–ï–†–ï–Ø (galleria.js)
// ============================================

// üì± –ì–ª–æ–±–∞–ª—å–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
const GALLERY_CONFIG = {
// –û—Å–Ω–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
  autoLoad: true,
  lazyLoadOffset: 2, // –°–∫—ñ–ª—å–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω—å –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –Ω–∞–ø–µ—Ä–µ–¥

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è debounce/throttle
  debounce: {
    navigation: 250,
    swipe: 300,
    keyboard: 150,
    resize: 500,
    scroll: 100
  },

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–≤–∞–π–ø—ñ–≤ (—Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –∑ picture.js)
  swipe: {
    desktop: {
      minDistance: 50,
      minVelocity: 0.3,
      maxTime: 1000
    },
    mobile: {
      minDistance: 25,
      minVelocity: 0.2,
      maxTime: 800
    }
  },

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è UI
  ui: {
    animationDuration: 300,
    scrollBehavior: 'smooth',
    thumbnailScrollOffset: 'center'
  }
};

// –î–µ—Ç–µ–∫—Ü—ñ—è –º–æ–±—ñ–ª—å–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é (—Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –∑ picture.js)
const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);

// ============================================
// üõ†Ô∏è –£–¢–ò–õ–Ü–¢–ò –¢–ê –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á
// ============================================

/**
 * –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ debounce —Ñ—É–Ω–∫—Ü—ñ—è –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é
 */
function createDebounce(func, delay, immediate = false) {
  let timeout;
  let result;

  const debounced = function(...args) {
    const callNow = immediate && !timeout;

    const later = () => {
      timeout = null;
      if (!immediate) result = func.apply(this, args);
    };

    clearTimeout(timeout);
    timeout = setTimeout(later, delay);

    if (callNow) result = func.apply(this, args);
    return result;
  };

  debounced.cancel = () => {
    clearTimeout(timeout);
    timeout = null;
  };

  return debounced;
}

/**
 * Throttle —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —á–∞—Å—Ç–æ –≤–∏–∫–ª–∏–∫–∞—î–º–∏—Ö –ø–æ–¥—ñ–π
 */
function createThrottle(func, limit) {
  let lastFunc;
  let lastRan;

  return function(...args) {
    if (!lastRan) {
      func.apply(this, args);
      lastRan = Date.now();
    } else {
      clearTimeout(lastFunc);
      lastFunc = setTimeout(() => {
        if ((Date.now() - lastRan) >= limit) {
          func.apply(this, args);
          lastRan = Date.now();
        }
      }, limit - (Date.now() - lastRan));
    }
  };
}

/**
 * –û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –æ–±—Ä–æ–±–∫–∏ —Å–≤–∞–π–ø—É (—É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∞ –∑ picture.js)
 */
function createSwipeHandler(config) {
  return function handleSwipe(startX, startY, endX, endY, startTime, endTime) {
    const deltaX = endX - startX;
    const deltaY = endY - startY;
    const deltaTime = endTime - startTime;

// –û–±—á–∏—Å–ª—é—î–º–æ –¥–∏—Å—Ç–∞–Ω—Ü—ñ—é —Ç–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å
    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    const velocity = distance / deltaTime;

// –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å–≤–∞–π–ø—É
    if (distance < config.minDistance ||
      deltaTime > config.maxTime ||
      velocity < config.minVelocity) {
      return null;
    }

// –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞–ø—Ä—è–º–∫—É
    const isHorizontal = Math.abs(deltaX) > Math.abs(deltaY) * 1.2;
    const isVertical = Math.abs(deltaY) > Math.abs(deltaX) * 1.2;

    if (isHorizontal) {
      return deltaX > 0 ? 'right' : 'left';
    } else if (isVertical) {
      return deltaY > 0 ? 'down' : 'up';
    }

    return null;
  };
}

/**
 * –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–æ–¥–≤—ñ–π–Ω–∏—Ö –¥—ñ–π (—É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω–∞ –∑ picture.js)
 */
function createActionLock(delay = 300) {
  let isLocked = false;
  let lockTimeout;

  return {
    execute(callback, ...args) {
      if (isLocked) return false;

      isLocked = true;
      const result = callback.apply(this, args);

      clearTimeout(lockTimeout);
      lockTimeout = setTimeout(() => {
        isLocked = false;
      }, delay);

      return result;
    },

    isLocked() {
      return isLocked;
    },

    unlock() {
      isLocked = false;
      clearTimeout(lockTimeout);
    }
  };
}

/**
 * –°–∏—Å—Ç–µ–º–∞ lazy loading –∑–æ–±—Ä–∞–∂–µ–Ω—å
 */
class LazyImageLoader {
  constructor() {
    this.loadedImages = new Set();
    this.loadingImages = new Set();
    this.observers = new Map();
  }

  createImageElement(src, alt = '', onLoad = null, onError = null) {
    const img = document.createElement('img');
    img.draggable = false;
    img.alt = alt;

// –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
    img.addEventListener('contextmenu', (e) => e.preventDefault(), { passive: false });

// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    if (onLoad) img.addEventListener('load', onLoad, { once: true, passive: true });
    if (onError) img.addEventListener('error', onError, { once: true, passive: true });

// Lazy loading –ª–æ–≥—ñ–∫–∞
    if (this.loadedImages.has(src)) {
      img.src = src;
    } else {
      this.scheduleLoad(img, src);
    }

    return img;
  }

  scheduleLoad(img, src) {
    if (this.loadingImages.has(src)) return;

    this.loadingImages.add(src);

// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ setTimeout –¥–ª—è –Ω–µ–±–ª–æ–∫—É—é—á–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    setTimeout(() => {
      img.src = src;
      this.loadedImages.add(src);
      this.loadingImages.delete(src);
    }, 0);
  }

  preloadImages(urls, maxConcurrent = 3) {
    const toLoad = urls.filter(url => !this.loadedImages.has(url) && !this.loadingImages.has(url));

    for (let i = 0; i < Math.min(toLoad.length, maxConcurrent); i++) {
      const url = toLoad[i];
      this.loadingImages.add(url);

      const img = new Image();
      img.onload = () => {
        this.loadedImages.add(url);
        this.loadingImages.delete(url);
      };
      img.onerror = () => {
        this.loadingImages.delete(url);
      };
      img.src = url;
    }
  }

  clear() {
    this.loadedImages.clear();
    this.loadingImages.clear();
    this.observers.clear();
  }
}

// ============================================
// üñºÔ∏è –û–°–ù–û–í–ù–ò–ô –ö–õ–ê–° –ì–ê–õ–ï–†–ï–á
// ============================================

class OptimizedGallery {
  constructor(slides) {
// –û—Å–Ω–æ–≤–Ω–∏–π —Å—Ç–∞–Ω
    this.slides = slides || this.getDefaultSlides();
    this.currentIndex = 0;
    this.isFullscreen = false;
    this.userHasInteracted = false;
    this.isInitialized = false;

// DOM –µ–ª–µ–º–µ–Ω—Ç–∏ (–∫–µ—à—É—î–º–æ)
    this.elements = {};

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è —Å–≤–∞–π–ø—ñ–≤
    this.swipeConfig = isMobile ?
      GALLERY_CONFIG.swipe.mobile :
      GALLERY_CONFIG.swipe.desktop;

// –°–∏—Å—Ç–µ–º–∏ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
    this.swipeHandler = createSwipeHandler(this.swipeConfig);
    this.actionLock = createActionLock(GALLERY_CONFIG.debounce.navigation);
    this.imageLoader = new LazyImageLoader();

// –î–∞–Ω—ñ –¥–ª—è —Å–≤–∞–π–ø—ñ–≤
    this.swipeData = {
      startX: 0,
      startY: 0,
      startTime: 0,
      isSwiping: false,
      isDragging: false,
      lastActionTime: 0
    };

// –°—Ç–≤–æ—Ä—é—î–º–æ debounced –º–µ—Ç–æ–¥–∏
    this.createDebouncedMethods();

// –ó–≤'—è–∑—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–µ—Ç–æ–¥—ñ–≤
    this.bindMethods();
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏—Ö —Å–ª–∞–π–¥—ñ–≤
   */
  getDefaultSlides() {
    return [
      { image: '../../assets/img/hello/1.jpg', title: '–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è 1' },
      { image: '../../assets/img/hello/2.webp', title: '–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è 2' },
      { image: '../../assets/img/hello/3.jpg', title: '–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è 3' },
      { image: '../../assets/img/hello/4.jpg', title: '–§–æ—Ç–æ 4' },
      { image: '../../assets/img/hello/5.jpg', title: '–§–æ—Ç–æ 5' },
      { image: '../../assets/img/hello/6.jpg', title: '–§–æ—Ç–æ 6' },
      { image: '../../assets/img/hello/7.jpg', title: '–§–æ—Ç–æ 7' },
      { image: '../../assets/img/hello/8.jpg', title: '–§–æ—Ç–æ 8' },
      { image: '../../assets/img/hello/9.jpg', title: '–§–æ—Ç–æ 9' }
    ];
  }

  /**
   * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è debounced –º–µ—Ç–æ–¥—ñ–≤
   */
  createDebouncedMethods() {
    this.debouncedNext = createDebounce(
      this.nextSlide.bind(this),
      GALLERY_CONFIG.debounce.navigation
    );

    this.debouncedPrev = createDebounce(
      this.prevSlide.bind(this),
      GALLERY_CONFIG.debounce.navigation
    );

    this.debouncedGoTo = createDebounce(
      this.goToSlide.bind(this),
      GALLERY_CONFIG.debounce.navigation
    );

    this.throttledUpdate = createThrottle(
      this.updateDisplay.bind(this),
      50
    );

    this.debouncedResize = createDebounce(
      this.handleResize.bind(this),
      GALLERY_CONFIG.debounce.resize
    );
  }

  /**
   * –ó–≤'—è–∑—É–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –º–µ—Ç–æ–¥—ñ–≤
   */
  bindMethods() {
    this.handleTouchStart = this.handleTouchStart.bind(this);
    this.handleTouchMove = this.handleTouchMove.bind(this);
    this.handleTouchEnd = this.handleTouchEnd.bind(this);
    this.handleKeyDown = this.handleKeyDown.bind(this);
    this.handleVisibilityChange = this.handleVisibilityChange.bind(this);
    this.handleOrientationChange = this.handleOrientationChange.bind(this);
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥–∞–ª–µ—Ä–µ—ó
   */
  init() {
    if (this.isInitialized) {
      console.warn('‚ö†Ô∏è –ì–∞–ª–µ—Ä–µ—è –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞');
      return false;
    }

// –ö–µ—à—É—î–º–æ DOM –µ–ª–µ–º–µ–Ω—Ç–∏
    if (!this.cacheElements()) {
      console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –µ–ª–µ–º–µ–Ω—Ç–∏ –≥–∞–ª–µ—Ä–µ—ó');
      return false;
    }

// –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    this.createThumbnails();
    this.attachEventListeners();

// –ü–æ—á–∞—Ç–∫–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
    this.updateDisplay();
    this.preloadAdjacentImages();

// –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –≤–∑–∞—î–º–æ–¥—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    this.setupUserInteractionDetection();

    this.isInitialized = true;

    console.log('üñºÔ∏è –ì–∞–ª–µ—Ä–µ—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞');
    console.log(`üì± –ü—Ä–∏—Å—Ç—Ä—ñ–π: ${isMobile ? '–ú–æ–±—ñ–ª—å–Ω–∏–π' : '–î–µ—Å–∫—Ç–æ–ø'}`);
    console.log(`üìè –ß—É—Ç–ª–∏–≤—ñ—Å—Ç—å —Å–≤–∞–π–ø—É: ${this.swipeConfig.minDistance}px`);
    console.log(`üñºÔ∏è –í—Å—å–æ–≥–æ —Å–ª–∞–π–¥—ñ–≤: ${this.slides.length}`);

    return true;
  }

  /**
   * –ö–µ—à—É–≤–∞–Ω–Ω—è DOM –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
   */
  cacheElements() {
    const elements = {
      verticalDisplay: document.querySelector('.vertical-display'),
      thumbnailsContainer: document.querySelector('.photo-thumbnails'),
      mainDisplay: document.querySelector('.main-photo-display'),
      fullscreenOverlay: document.querySelector('.photo-fullscreen-overlay'),
      fullscreenMain: document.querySelector('.photo-fullscreen-main'),
      fullscreenCounter: document.querySelector('.photo-fullscreen-counter'),
      counter: document.querySelector('.photo-counter'),
      progressBar: document.querySelector('.photo-progress'),
      errorElement: document.querySelector('.photo-error'),
      closeButton: document.querySelector('.photo-close-button'),
      prevButton: document.querySelector('.photo-nav-prev'),
      nextButton: document.querySelector('.photo-nav-next')
    };

// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
    if (!elements.verticalDisplay || !elements.mainDisplay) {
      return false;
    }

    this.elements = elements;
    return true;
  }

  /**
   * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –º—ñ–Ω—ñ–∞—Ç—é—Ä
   */
  createThumbnails() {
    const { thumbnailsContainer } = this.elements;
    if (!thumbnailsContainer) return;

// –û—á–∏—â—É—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    thumbnailsContainer.innerHTML = '';

    this.slides.forEach((slide, index) => {
      const thumbnail = this.createThumbnailElement(slide, index);
      thumbnailsContainer.appendChild(thumbnail);
    });
  }

  /**
   * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ –º—ñ–Ω—ñ–∞—Ç—é—Ä–∏
   */
  createThumbnailElement(slide, index) {
    const thumbnail = document.createElement('div');
    thumbnail.className = `photo-thumbnail ${index === 0 ? 'active' : ''}`;
    thumbnail.setAttribute('data-index', index);

// –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞—Ö–∏—â–µ–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –∑–º—ñ–Ω–∏ —Å–ª–∞–π–¥—É
    const safeChangeSlide = (idx, elem) => {
      if (!this.swipeData.isDragging && !this.swipeData.isSwiping) {
        this.actionLock.execute(() => this.debouncedGoTo(idx, elem));
      }
    };

// –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö —Ç–∞ –¥–µ—Å–∫—Ç–æ–ø–Ω–∏—Ö
    if (isMobile) {
      this.attachMobileThumbnailEvents(thumbnail, index, safeChangeSlide);
    } else {
      this.attachDesktopThumbnailEvents(thumbnail, index, safeChangeSlide);
    }

// –î–æ–¥–∞—î–º–æ placeholder
    const placeholder = document.createElement('div');
    placeholder.className = 'photo-thumbnail-placeholder';
    placeholder.innerHTML = '<span>üì∑</span><span>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</span>';
    thumbnail.appendChild(placeholder);

// –°—Ç–≤–æ—Ä—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ lazy loading
    const img = this.imageLoader.createImageElement(
      slide.image,
      slide.title || `–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è ${index + 1}`,
      () => {
        const placeholderEl = thumbnail.querySelector('.photo-thumbnail-placeholder');
        if (placeholderEl) placeholderEl.remove();
      },
      () => {
        placeholder.innerHTML = '<span>‚ùå</span><span>–ü–æ–º–∏–ª–∫–∞</span>';
      }
    );

    thumbnail.appendChild(img);
    return thumbnail;
  }

  /**
   * –ú–æ–±—ñ–ª—å–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –º—ñ–Ω—ñ–∞—Ç—é—Ä
   */
  attachMobileThumbnailEvents(thumbnail, index, callback) {
    let touchStartTime = 0;
    let hasMoved = false;

    thumbnail.addEventListener('touchstart', (e) => {
      e.stopPropagation();
      touchStartTime = Date.now();
      hasMoved = false;
    }, { passive: true });

    thumbnail.addEventListener('touchmove', () => {
      hasMoved = true;
    }, { passive: true });

    thumbnail.addEventListener('touchend', (e) => {
      e.preventDefault();
      e.stopPropagation();

      const touchDuration = Date.now() - touchStartTime;
      if (!hasMoved && touchDuration < 500) {
        callback(index, thumbnail);
      }
    });
  }

  /**
   * –î–µ—Å–∫—Ç–æ–ø–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –º—ñ–Ω—ñ–∞—Ç—é—Ä
   */
  attachDesktopThumbnailEvents(thumbnail, index, callback) {
    thumbnail.addEventListener('click', (e) => {
      e.stopPropagation();
      callback(index, thumbnail);
    });
  }

  /**
   * –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
   */
  attachEventListeners() {
    const { verticalDisplay, fullscreenOverlay, closeButton, prevButton, nextButton } = this.elements;

// Touch –ø–æ–¥—ñ—ó –¥–ª—è —Å–≤–∞–π–ø—ñ–≤
    if (verticalDisplay) {
      verticalDisplay.addEventListener('touchstart', this.handleTouchStart, { passive: true });
      verticalDisplay.addEventListener('touchmove', this.handleTouchMove, { passive: false });
      verticalDisplay.addEventListener('touchend', this.handleTouchEnd, { passive: true });
    }

    if (fullscreenOverlay) {
      fullscreenOverlay.addEventListener('touchstart', this.handleTouchStart, { passive: true });
      fullscreenOverlay.addEventListener('touchmove', this.handleTouchMove, { passive: false });
      fullscreenOverlay.addEventListener('touchend', this.handleTouchEnd, { passive: true });

// –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ –∫–ª—ñ–∫—É –Ω–∞ overlay
      fullscreenOverlay.addEventListener('click', (e) => {
        if (e.target === fullscreenOverlay) {
          this.closeFullscreen();
        }
      });
    }

// –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è
    document.addEventListener('keydown', this.handleKeyDown, { passive: false });

// –°–∏—Å—Ç–µ–º–Ω—ñ –ø–æ–¥—ñ—ó
    document.addEventListener('visibilitychange', this.handleVisibilityChange, { passive: true });

    if (isMobile) {
      window.addEventListener('orientationchange', this.handleOrientationChange, { passive: true });
      window.addEventListener('resize', this.debouncedResize, { passive: true });
    }

// –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
    if (closeButton) {
      closeButton.addEventListener('click', () => this.closeFullscreen());
    }

    if (prevButton) {
      prevButton.addEventListener('click', (e) => {
        e.stopPropagation();
        this.actionLock.execute(() => this.debouncedPrev());
      });
    }

    if (nextButton) {
      nextButton.addEventListener('click', (e) => {
        e.stopPropagation();
        this.actionLock.execute(() => this.debouncedNext());
      });
    }

// –ö–ª—ñ–∫–∏ –ø–æ –≥–æ–ª–æ–≤–Ω–æ–º—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—é
    if (this.elements.mainDisplay) {
      this.elements.mainDisplay.addEventListener('click', () => {
        if (!this.swipeData.isDragging && !this.swipeData.isSwiping) {
          this.actionLock.execute(() => this.openFullscreen());
        }
      });
    }

// –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è zoom –Ω–∞ –ø–æ–¥–≤—ñ–π–Ω–∏–π —Ç–∞–ø
    this.preventDoubleTouch();
  }

  /**
   * –ó–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–æ–¥–≤—ñ–π–Ω–æ–≥–æ —Ç–∞–ø—É
   */
  preventDoubleTouch() {
    document.addEventListener('touchstart', (e) => {
      if (e.touches.length > 1) {
        e.preventDefault();
      }
    }, { passive: false });

    let lastTouchEnd = 0;
    document.addEventListener('touchend', (e) => {
      const now = Date.now();
      if (now - lastTouchEnd <= 300) {
        e.preventDefault();
      }
      lastTouchEnd = now;
    }, { passive: false });
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ Touch –ø–æ–¥—ñ–π –¥–ª—è —Å–≤–∞–π–ø—ñ–≤
   */
  handleTouchStart(e) {
// –Ü–≥–Ω–æ—Ä—É—î–º–æ —Å–≤–∞–π–ø–∏ –ø–æ –∫–Ω–æ–ø–∫–∞—Ö —Ç–∞ –º—ñ–Ω—ñ–∞—Ç—é—Ä–∞—Ö
    if (this.isIgnoredTarget(e.target)) return;

    const touch = e.touches[0];
    this.swipeData = {
      ...this.swipeData,
      startX: touch.clientX,
      startY: touch.clientY,
      startTime: Date.now(),
      isSwiping: true,
      isDragging: false
    };
  }

  handleTouchMove(e) {
    if (!this.swipeData.isSwiping) return;
    if (this.isIgnoredTarget(e.target)) return;

    const touch = e.touches[0];
    const deltaX = Math.abs(touch.clientX - this.swipeData.startX);
    const deltaY = Math.abs(touch.clientY - this.swipeData.startY);

    if (deltaX > 10 || deltaY > 10) {
      this.swipeData.isDragging = true;
    }

// –ë–ª–æ–∫—É—î–º–æ —Å–∫—Ä–æ–ª –¥–ª—è –∞–∫—Ç–∏–≤–Ω–∏—Ö –∂–µ—Å—Ç—ñ–≤
    if ((deltaX > deltaY && deltaX > 20) || this.isFullscreen) {
      e.preventDefault();
    }
  }

  handleTouchEnd(e) {
    if (!this.swipeData.isSwiping) {
      this.resetSwipeData();
      return;
    }

    if (this.isIgnoredTarget(e.target) || !this.swipeData.isDragging) {
      this.resetSwipeData();
      return;
    }

    const touch = e.changedTouches[0];
    const endTime = Date.now();

// –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —á–∞—Å —Å–≤–∞–π–ø—É
    const swipeDuration = endTime - this.swipeData.startTime;
    if (swipeDuration < 50) {
      this.resetSwipeData();
      return;
    }

    const direction = this.swipeHandler(
      this.swipeData.startX,
      this.swipeData.startY,
      touch.clientX,
      touch.clientY,
      this.swipeData.startTime,
      endTime
    );

    if (direction && this.actionLock.execute(() => this.processSwipe(direction))) {
      this.addSwipeFeedback(direction);
    }

    this.resetSwipeData();
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω—ñ —Ü—ñ–ª—ñ –¥–ª—è —Å–≤–∞–π–ø—ñ–≤
   */
  isIgnoredTarget(target) {
    return target.closest('button') ||
      target.closest('.photo-close-button') ||
      target.closest('.photo-fullscreen-nav') ||
      target.closest('.photo-thumbnail');
  }

  /**
   * –°–∫–∏–¥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å–≤–∞–π–ø—É
   */
  resetSwipeData() {
    this.swipeData.isSwiping = false;
    this.swipeData.isDragging = false;
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –Ω–∞–ø—Ä—è–º–∫—É —Å–≤–∞–π–ø—É
   */
  processSwipe(direction) {
    console.log(`üîÑ Swipe detected: ${direction}`);

    switch (direction) {
      case 'left':
        this.debouncedNext();
        return true;
      case 'right':
        this.debouncedPrev();
        return true;
      case 'up':
        if (!this.isFullscreen) {
          this.debouncedNext();
          return true;
        }
        break;
      case 'down':
        if (!this.isFullscreen) {
          this.debouncedPrev();
          return true;
        }
        break;
    }
    return false;
  }

  /**
   * –í—ñ–∑—É–∞–ª—å–Ω–∏–π —Ñ—ñ–¥–±–µ–∫ –¥–ª—è —Å–≤–∞–π–ø—É
   */
  addSwipeFeedback(direction) {
    const { verticalDisplay } = this.elements;
    if (!verticalDisplay) return;

    verticalDisplay.classList.add(`swipe-${direction}`);
    setTimeout(() => {
      verticalDisplay.classList.remove(`swipe-${direction}`);
    }, GALLERY_CONFIG.ui.animationDuration);
  }

  /**
   * –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω–∞ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—è
   */
  handleKeyDown(e) {
// –Ü–≥–Ω–æ—Ä—É—î–º–æ, —è–∫—â–æ —Ñ–æ–∫—É—Å –Ω–∞ —ñ–Ω–ø—É—Ç—ñ
    if (e.target.matches('input, textarea, select')) return;

    const keyActions = this.isFullscreen ?
      this.getFullscreenKeyActions() :
      this.getNormalKeyActions();

    const action = keyActions[e.key] || keyActions[e.code];
    if (action && this.actionLock.execute(action)) {
      e.preventDefault();
    }
  }

  /**
   * –ö–ª–∞–≤—ñ—à—ñ –¥–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
   */
  getNormalKeyActions() {
    return {
      'ArrowUp': () => this.debouncedPrev(),
      'ArrowDown': () => this.debouncedNext(),
      'Enter': () => this.openFullscreen(),
      'Escape': () => this.resetGallery(),
      'KeyH': () => this.showHelp(),
      'h': () => this.showHelp()
    };
  }

  /**
   * –ö–ª–∞–≤—ñ—à—ñ –¥–ª—è –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
   */
  getFullscreenKeyActions() {
    return {
      'Escape': () => this.closeFullscreen(),
      'ArrowLeft': () => this.debouncedPrev(),
      'ArrowRight': () => this.debouncedNext()
    };
  }

  /**
   * –°–∏—Å—Ç–µ–º–Ω—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
   */
  handleVisibilityChange() {
    if (document.hidden) {
// –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –ø–∞—É–∑–∏ –∞–Ω—ñ–º–∞—Ü—ñ–π
      this.actionLock.unlock();
    }
  }

  handleOrientationChange() {
    if (!isMobile) return;

    setTimeout(() => {
      if (this.isFullscreen) {
        this.updateFullscreenDisplay();
      }
      this.throttledUpdate();
    }, 500);
  }

  handleResize() {
    this.throttledUpdate();
    if (this.isFullscreen) {
      this.updateFullscreenDisplay();
    }
  }

  /**
   * –î–µ—Ç–µ–∫—Ü—ñ—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  setupUserInteractionDetection() {
    const events = ['click', 'keydown', 'touchstart', 'wheel'];

    const detectInteraction = () => {
      this.userHasInteracted = true;
      events.forEach(event => {
        window.removeEventListener(event, detectInteraction);
      });
    };

    events.forEach(event => {
      window.addEventListener(event, detectInteraction, {
        once: true,
        passive: true
      });
    });
  }

// ============================================
// üñºÔ∏è –û–°–ù–û–í–ù–Ü –ú–ï–¢–û–î–ò –ù–ê–í–Ü–ì–ê–¶–Ü–á
// ============================================

  /**
   * –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ª–∞–π–¥—É
   */
  nextSlide() {
    const nextIndex = (this.currentIndex + 1) % this.slides.length;
    this.goToSlide(nextIndex);
  }

  /**
   * –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Å–ª–∞–π–¥—É
   */
  prevSlide() {
    const prevIndex = (this.currentIndex - 1 + this.slides.length) % this.slides.length;
    this.goToSlide(prevIndex);
  }

  /**
   * –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–∞–π–¥—É
   */
  goToSlide(index, thumbnail = null) {
    if (index < 0 || index >= this.slides.length) return false;
    if (index === this.currentIndex) return false;

    const now = Date.now();
    if (now - this.swipeData.lastActionTime < GALLERY_CONFIG.debounce.swipe) {
      return false;
    }

    this.currentIndex = index;
    this.swipeData.lastActionTime = now;

// –ü–∞–∫–µ—Ç–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è DOM
    requestAnimationFrame(() => {
      this.updateMainDisplay();
      this.updateThumbnails(thumbnail);
      this.updateCounters();
      this.updateFullscreenDisplay();
      this.preloadAdjacentImages();
      this.scrollToActiveThumbnail();
    });

    return true;
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–∏—Å–ø–ª–µ—é
   */
  updateMainDisplay() {
    const { mainDisplay } = this.elements;
    if (!mainDisplay) return;

    const slide = this.slides[this.currentIndex];

// –ü–æ–∫–∞–∑—É—î–º–æ placeholder
    mainDisplay.innerHTML = `
<div class="photo-placeholder">
  <span>üì∑</span>
  <span>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...</span>
</div>
`;

// –°—Ç–≤–æ—Ä—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ lazy loading
    const img = this.imageLoader.createImageElement(
      slide.image,
      slide.title || `–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è ${this.currentIndex + 1}`,
      () => {
        mainDisplay.innerHTML = '';
        mainDisplay.appendChild(img);

// –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –∑ –∑–∞—Ö–∏—Å—Ç–æ–º
        img.addEventListener('click', () => {
          if (!this.swipeData.isDragging && !this.swipeData.isSwiping) {
            this.actionLock.execute(() => this.openFullscreen());
          }
        }, { once: false, passive: true });
      },
      () => {
        mainDisplay.innerHTML = `
<div class="photo-placeholder">
  <span>‚ùå</span>
  <span>–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è</span>
  <small style="margin-top: 10px; opacity: 0.7;">${slide.image}</small>
</div>
`;
        this.showError(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: ${slide.title || '–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è ' + (this.currentIndex + 1)}`);
      }
    );
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º—ñ–Ω—ñ–∞—Ç—é—Ä
   */
  updateThumbnails(activeThumbnail = null) {
    const thumbnails = document.querySelectorAll('.photo-thumbnail');

    thumbnails.forEach((thumb, index) => {
      thumb.classList.toggle('active', index === this.currentIndex);
    });

// –Ø–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –º—ñ–Ω—ñ–∞—Ç—é—Ä–∞
    if (activeThumbnail) {
      activeThumbnail.classList.add('active');
    }
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫—ñ–≤ —Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—É
   */
  updateCounters() {
    const { counter, progressBar } = this.elements;

    if (counter) {
      counter.textContent = `${this.currentIndex + 1} / ${this.slides.length}`;
    }

    if (progressBar) {
      const progress = ((this.currentIndex + 1) / this.slides.length) * 100;
      progressBar.style.width = `${progress}%`;
    }
  }

  /**
   * –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –∞–∫—Ç–∏–≤–Ω–æ—ó –º—ñ–Ω—ñ–∞—Ç—é—Ä–∏
   */
  scrollToActiveThumbnail() {
    if (!isMobile || !this.userHasInteracted) return;

    const activeThumbnail = document.querySelector('.photo-thumbnail.active');
    if (activeThumbnail) {
      setTimeout(() => {
        activeThumbnail.scrollIntoView({
          behavior: GALLERY_CONFIG.ui.scrollBehavior,
          block: 'nearest',
          inline: GALLERY_CONFIG.ui.thumbnailScrollOffset
        });
      }, 100);
    }
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—É—Å—ñ–¥–Ω—ñ—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å
   */
  preloadAdjacentImages() {
    const toPreload = [];
    const offset = GALLERY_CONFIG.lazyLoadOffset;

    for (let i = 1; i <= offset; i++) {
// –ù–∞—Å—Ç—É–ø–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
      const nextIndex = (this.currentIndex + i) % this.slides.length;
      toPreload.push(this.slides[nextIndex].image);

// –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
      const prevIndex = (this.currentIndex - i + this.slides.length) % this.slides.length;
      toPreload.push(this.slides[prevIndex].image);
    }

    this.imageLoader.preloadImages(toPreload);
  }

  /**
   * –ü–∞–∫–µ—Ç–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∏—Å–ø–ª–µ—é
   */
  updateDisplay() {
    if (!this.isInitialized) return;

    requestAnimationFrame(() => {
      this.updateMainDisplay();
      this.updateThumbnails();
      this.updateCounters();
      this.updateFullscreenDisplay();
    });
  }

// ============================================
// üñºÔ∏è –ü–û–í–ù–û–ï–ö–†–ê–ù–ù–ò–ô –†–ï–ñ–ò–ú
// ============================================

  /**
   * –í—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
   */
  openFullscreen() {
    const { fullscreenOverlay } = this.elements;
    if (!fullscreenOverlay || this.isFullscreen) return;

    this.isFullscreen = true;
    document.body.style.overflow = 'hidden';

    if (isMobile) {
      document.documentElement.style.overflow = 'hidden';
// –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –∞–¥—Ä–µ—Å–Ω—É —Å—Ç—Ä–æ–∫—É
      setTimeout(() => window.scrollTo(0, 1), 100);
    }

    this.updateFullscreenDisplay();
    fullscreenOverlay.classList.add('active');

    console.log('üîç –ü–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–∏–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ');
  }

  /**
   * –ó–∞–∫—Ä–∏—Ç—Ç—è –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
   */
  closeFullscreen() {
    const { fullscreenOverlay } = this.elements;
    if (!fullscreenOverlay || !this.isFullscreen) return;

    this.isFullscreen = false;
    document.body.style.overflow = '';

    if (isMobile) {
      document.documentElement.style.overflow = '';
    }

    fullscreenOverlay.classList.remove('active');

    console.log('‚ùå –ü–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–∏–π —Ä–µ–∂–∏–º –∑–∞–∫—Ä–∏—Ç–æ');
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
   */
  updateFullscreenDisplay() {
    if (!this.isFullscreen) return;

    const { fullscreenMain, fullscreenCounter } = this.elements;
    if (!fullscreenMain) return;

    const slide = this.slides[this.currentIndex];

// –ü–æ–∫–∞–∑—É—î–º–æ placeholder
    fullscreenMain.innerHTML = `
<div class="photo-placeholder">
  <span>üì∑</span>
  <span>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...</span>
</div>
`;

// –°—Ç–≤–æ—Ä—é—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    const img = this.imageLoader.createImageElement(
      slide.image,
      slide.title || `–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è ${this.currentIndex + 1}`,
      () => {
        fullscreenMain.innerHTML = '';
        fullscreenMain.appendChild(img);
      },
      () => {
        fullscreenMain.innerHTML = `
<div class="photo-placeholder">
  <span>‚ùå</span>
  <span>–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è</span>
</div>
`;
      }
    );

// –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
    if (fullscreenCounter) {
      fullscreenCounter.textContent = `${this.currentIndex + 1} / ${this.slides.length}`;
    }
  }

// ============================================
// üõ†Ô∏è –î–û–ü–û–ú–Ü–ñ–ù–Ü –ú–ï–¢–û–î–ò
// ============================================

  /**
   * –°–∫–∏–¥–∞–Ω–Ω—è –≥–∞–ª–µ—Ä–µ—ó
   */
  resetGallery() {
    this.goToSlide(0);
    if (this.isFullscreen) {
      this.closeFullscreen();
    }
    console.log('üîÑ –ì–∞–ª–µ—Ä–µ—è —Å–∫–∏–Ω—É—Ç–∞');
  }

  /**
   * –ü–æ–∫–∞–∑ –ø–æ–º–∏–ª–∫–∏
   */
  showError(message) {
    const { errorElement } = this.elements;
    if (!errorElement) return;

    errorElement.textContent = message;
    errorElement.style.display = 'block';

    setTimeout(() => {
      errorElement.style.display = 'none';
    }, 5000);

    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–∞–ª–µ—Ä–µ—ó:', message);
  }

  /**
   * –ü–æ–∫–∞–∑ –¥–æ–≤—ñ–¥–∫–∏
   */
  showHelp() {
    const helpText = `
üìñ –î–û–í–Ü–î–ö–ê –ì–ê–õ–ï–†–ï–á

üéπ –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω—ñ —Å–∫–æ—Ä–æ—á–µ–Ω–Ω—è:
- ‚Üë/‚Üì - –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –ø–æ —Å–ª–∞–π–¥–∞—Ö
- ‚Üê/‚Üí - –ù–∞–≤—ñ–≥–∞—Ü—ñ—è –≤ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–æ–º—É —Ä–µ–∂–∏–º—ñ
- Enter - –ü–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–∏–π —Ä–µ–∂–∏–º
- Escape - –í–∏—Ö—ñ–¥/–°–∫–∏–¥–∞–Ω–Ω—è
- H - –¶—è –¥–æ–≤—ñ–¥–∫–∞

üì± –ú–æ–±—ñ–ª—å–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:
- –¢–∞–ø –ø–æ –º—ñ–Ω—ñ–∞—Ç—é—Ä—ñ - –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ —Å–ª–∞–π–¥—É
- –¢–∞–ø –ø–æ –≥–æ–ª–æ–≤–Ω–æ–º—É –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—é - –ü–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–∏–π —Ä–µ–∂–∏–º
- –°–≤–∞–π–ø –≤–ª—ñ–≤–æ/–≤–ø—Ä–∞–≤–æ - –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
- –°–≤–∞–π–ø –≤–≥–æ—Ä—É/–≤–Ω–∏–∑ - –ù–∞–≤—ñ–≥–∞—Ü—ñ—è (–∫—Ä—ñ–º –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É)

‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:
- –ß—É—Ç–ª–∏–≤—ñ—Å—Ç—å —Å–≤–∞–π–ø—É: ${this.swipeConfig.minDistance}px
- –¢–∏–ø –ø—Ä–∏—Å—Ç—Ä–æ—é: ${isMobile ? '–ú–æ–±—ñ–ª—å–Ω–∏–π' : '–î–µ—Å–∫—Ç–æ–ø–Ω–∏–π'}
- –í—Å—å–æ–≥–æ —Å–ª–∞–π–¥—ñ–≤: ${this.slides.length}
`;

    alert(helpText);
  }

// ============================================
// üóëÔ∏è –û–ß–ò–©–ï–ù–ù–Ø –¢–ê –î–ï–°–¢–†–£–ö–¢–û–†
// ============================================

  /**
   * –ü–æ–≤–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è –≥–∞–ª–µ—Ä–µ—ó
   */
  destroy() {
    console.log('üóëÔ∏è –ü–æ—á–∞—Ç–æ–∫ –æ—á–∏—â–µ–Ω–Ω—è –≥–∞–ª–µ—Ä–µ—ó...');

// –°–∫–∞—Å–æ–≤—É—î–º–æ –≤—Å—ñ debounced —Ñ—É–Ω–∫—Ü—ñ—ó
    this.debouncedNext?.cancel?.();
    this.debouncedPrev?.cancel?.();
    this.debouncedGoTo?.cancel?.();
    this.debouncedResize?.cancel?.();

// –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∏–ª—ñ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    if (this.isFullscreen) {
      document.body.style.overflow = '';
      if (isMobile) {
        document.documentElement.style.overflow = '';
      }
    }

// –í–∏–¥–∞–ª—è—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
    this.removeEventListeners();

// –û—á–∏—â—É—î–º–æ —Å–∏—Å—Ç–µ–º–∏
    this.imageLoader?.clear?.();
    this.actionLock?.unlock?.();

// –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω
    this.isInitialized = false;
    this.isFullscreen = false;
    this.elements = {};
    this.slides = [];

    console.log('‚úÖ –û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  }

  /**
   * –í–∏–¥–∞–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –ø–æ–¥—ñ–π
   */
  removeEventListeners() {
    const { verticalDisplay, fullscreenOverlay } = this.elements;

// Touch –ø–æ–¥—ñ—ó
    if (verticalDisplay) {
      verticalDisplay.removeEventListener('touchstart', this.handleTouchStart);
      verticalDisplay.removeEventListener('touchmove', this.handleTouchMove);
      verticalDisplay.removeEventListener('touchend', this.handleTouchEnd);
    }

    if (fullscreenOverlay) {
      fullscreenOverlay.removeEventListener('touchstart', this.handleTouchStart);
      fullscreenOverlay.removeEventListener('touchmove', this.handleTouchMove);
      fullscreenOverlay.removeEventListener('touchend', this.handleTouchEnd);
    }

// –°–∏—Å—Ç–µ–º–Ω—ñ –ø–æ–¥—ñ—ó
    document.removeEventListener('keydown', this.handleKeyDown);
    document.removeEventListener('visibilitychange', this.handleVisibilityChange);

    if (isMobile) {
      window.removeEventListener('orientationchange', this.handleOrientationChange);
      window.removeEventListener('resize', this.debouncedResize);
    }
  }

// ============================================
// üåê –ü–£–ë–õ–Ü–ß–ù–ò–ô API
// ============================================

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É
   */
  getCurrentSlide() {
    return this.currentIndex;
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–ª–∞–π–¥—ñ–≤
   */
  getTotalSlides() {
    return this.slides.length;
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
   */
  isInFullscreen() {
    return this.isFullscreen;
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —á—É—Ç–ª–∏–≤–æ—Å—Ç—ñ —Å–≤–∞–π–ø—É
   */
  getSwipeSensitivity() {
    return this.swipeConfig.minDistance;
  }

  /**
   * –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Å–ª–∞–π–¥—ñ–≤
   */
  addSlides(newSlides) {
    if (!Array.isArray(newSlides)) return false;

    this.slides.push(...newSlides);
    this.createThumbnails();

    console.log(`‚ûï –î–æ–¥–∞–Ω–æ ${newSlides.length} —Å–ª–∞–π–¥—ñ–≤`);
    return true;
  }

  /**
   * –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–ª–∞–π–¥—É
   */
  removeSlide(index) {
    if (index < 0 || index >= this.slides.length) return false;

    this.slides.splice(index, 1);

// –ö–æ—Ä–∏–≥—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —ñ–Ω–¥–µ–∫—Å
    if (this.currentIndex >= this.slides.length) {
      this.currentIndex = this.slides.length - 1;
    }

    this.createThumbnails();
    this.updateDisplay();

    console.log(`‚ûñ –í–∏–¥–∞–ª–µ–Ω–æ —Å–ª–∞–π–¥ ${index}`);
    return true;
  }
}

// ============================================
// üöÄ –ì–õ–û–ë–ê–õ–¨–ù–ê –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø
// ============================================

// –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –≥–∞–ª–µ—Ä–µ—ó
let galleryInstance = null;

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥–∞–ª–µ—Ä–µ—ó –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM
 */
document.addEventListener('DOMContentLoaded', function() {
  console.log('üñºÔ∏è –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –≥–∞–ª–µ—Ä–µ—ó...');

  try {
// –°—Ç–≤–æ—Ä—é—î–º–æ –µ–∫–∑–µ–º–ø–ª—è—Ä –≥–∞–ª–µ—Ä–µ—ó
    galleryInstance = new OptimizedGallery();

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ
    if (galleryInstance.init()) {
      console.log('‚úÖ –ì–∞–ª–µ—Ä–µ—è —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞');

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ API
      window.GalleryAPI = {
// –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
        nextSlide: () => galleryInstance.actionLock.execute(() => galleryInstance.debouncedNext()),
        prevSlide: () => galleryInstance.actionLock.execute(() => galleryInstance.debouncedPrev()),
        goToSlide: (index) => galleryInstance.actionLock.execute(() => galleryInstance.goToSlide(index)),

// –ü–æ–≤–Ω–æ–µ–∫—Ä–∞–Ω–Ω–∏–π —Ä–µ–∂–∏–º
        openFullscreen: () => galleryInstance.openFullscreen(),
        closeFullscreen: () => galleryInstance.closeFullscreen(),

// –£—Ç–∏–ª—ñ—Ç–∏
        resetGallery: () => galleryInstance.resetGallery(),
        showHelp: () => galleryInstance.showHelp(),

// –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
        getCurrentSlide: () => galleryInstance.getCurrentSlide(),
        getTotalSlides: () => galleryInstance.getTotalSlides(),
        isFullscreen: () => galleryInstance.isInFullscreen(),
        isMobile: () => isMobile,
        getSwipeSensitivity: () => galleryInstance.getSwipeSensitivity(),

// –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
        addSlides: (slides) => galleryInstance.addSlides(slides),
        removeSlide: (index) => galleryInstance.removeSlide(index),

// –°–∏—Å—Ç–µ–º–Ω—ñ
        destroy: () => galleryInstance.destroy(),
        getInstance: () => galleryInstance
      };

      console.log('üåê API –≥–∞–ª–µ—Ä–µ—ó –¥–æ—Å—Ç—É–ø–Ω–µ —á–µ—Ä–µ–∑ window.GalleryAPI');
      console.log('üí° –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å H –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏');

    } else {
      console.error('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≥–∞–ª–µ—Ä–µ—é');
    }

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
  }
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
window.addEventListener('error', function(e) {
  console.error('üö® –ì–ª–æ–±–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≥–∞–ª–µ—Ä–µ—ó:', e.error);
  if (galleryInstance) {
    galleryInstance.showError('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –≤ –≥–∞–ª–µ—Ä–µ—ó. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.');
  }
});

// –û—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ
window.addEventListener('beforeunload', function() {
  if (galleryInstance) {
    galleryInstance.destroy();
    galleryInstance = null;
  }
});

console.log('üöÄ –°–∫—Ä–∏–ø—Ç –≥–∞–ª–µ—Ä–µ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
console.log('üìò –î–æ—Å—Ç—É–ø –¥–æ API: window.GalleryAPI');
